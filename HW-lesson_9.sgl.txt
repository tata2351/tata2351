--task1  (lesson9)
-- oracle: https://www.hackerrank.com/challenges/the-report/problem

select
case when Grade < 8 then 'null'
     else Students.Name
     end, 
grades.Grade, Marks
from Students
join grades
on Students.Marks between grades.min_mark and grades.max_mark
order by grades.grade desc, Students.Name asc, Students.Marks asc;

--task2  (lesson9)
-- oracle: https://www.hackerrank.com/challenges/occupations/problem

select Doctor, Professor, Singer, Actor
from (
      select row_number() over (partition by occupation order by name) as rn, name, occupation     
      from occupations)
pivot (max(name) for occupation in ('Doctor' as Doctor,'Professor' as Professor, 'Singer' as Singer, 'Actor' as Actor)) pvt;
order by rn;

--task3  (lesson9)
-- oracle: https://www.hackerrank.com/challenges/weather-observation-station-9/problem
select distinct city
from station
where left(city, 1) not in ('A', 'E', 'I', 'O', 'U');


--task4  (lesson9)
-- oracle: https://www.hackerrank.com/challenges/weather-observation-station-10/problem

select distinct city
from station
where right (city, 1) not in ('a', 'e', 'i', 'o', 'u');

--task5  (lesson9)
-- oracle: https://www.hackerrank.com/challenges/weather-observation-station-11/problem

select distinct city
from station
where left(city, 1) not in ('A', 'E', 'I', 'O', 'U') or right(City, 1) not in ('a', 'e', 'i', 'o', 'u');

--task6  (lesson9)
-- oracle: https://www.hackerrank.com/challenges/weather-observation-station-12/problem

select distinct city
from station
where left(city, 1) not in ('A', 'E', 'I', 'O', 'U') and right(City, 1) not in ('a', 'e', 'i', 'o', 'u');

--task7  (lesson9)
-- oracle: https://www.hackerrank.com/challenges/salary-of-employees/problem

 select name
 from Employee
 where salary > 2000 and months <10
 order by employee_id asc;

--task8  (lesson9)
-- oracle: https://www.hackerrank.com/challenges/the-report/problem


select
case when Grade < 8 then 'null'
     else Students.Name
     end, 
grades.Grade, Marks
from Students
join grades
on Students.Marks between grades.min_mark and grades.max_mark
order by grades.grade desc, Students.Name asc, Students.Marks asc;
